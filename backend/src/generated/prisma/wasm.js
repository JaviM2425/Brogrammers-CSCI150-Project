
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userID: 'userID',
  username: 'username',
  password: 'password',
  height: 'height',
  weight: 'weight',
  createdAt: 'createdAt'
};

exports.Prisma.WeightLogScalarFieldEnum = {
  logID: 'logID',
  date: 'date',
  weight: 'weight',
  userID: 'userID'
};

exports.Prisma.WorkoutLogScalarFieldEnum = {
  logID: 'logID',
  planName: 'planName',
  exerciseName: 'exerciseName',
  sets: 'sets',
  reps: 'reps',
  weight: 'weight',
  date: 'date',
  userID: 'userID'
};

exports.Prisma.StepRecordScalarFieldEnum = {
  recordID: 'recordID',
  stepsCount: 'stepsCount',
  distance: 'distance',
  calories: 'calories',
  date: 'date',
  userID: 'userID'
};

exports.Prisma.WorkoutRecommendationScalarFieldEnum = {
  recommendationID: 'recommendationID',
  planName: 'planName',
  workoutType: 'workoutType',
  description: 'description'
};

exports.Prisma.FitHealthTipAPIScalarFieldEnum = {
  id: 'id',
  APIName: 'APIName',
  connected: 'connected',
  lastChecked: 'lastChecked'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  WeightLog: 'WeightLog',
  WorkoutLog: 'WorkoutLog',
  StepRecord: 'StepRecord',
  WorkoutRecommendation: 'WorkoutRecommendation',
  FitHealthTipAPI: 'FitHealthTipAPI'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Soled\\Documents\\GitHub\\Brogrammers-CSCI150-Project\\backend\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Soled\\Documents\\GitHub\\Brogrammers-CSCI150-Project\\backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  userID    Int      @id @default(autoincrement())\n  username  String   @unique\n  password  String\n  height    Float?\n  weight    Float?\n  createdAt DateTime @default(now())\n\n  weightLogs  WeightLog[]\n  workoutLogs WorkoutLog[]\n  stepRecords StepRecord[]\n}\n\nmodel WeightLog {\n  logID  Int      @id @default(autoincrement())\n  date   DateTime\n  weight Float\n  user   User     @relation(fields: [userID], references: [userID])\n  userID Int\n}\n\nmodel WorkoutLog {\n  logID        Int      @id @default(autoincrement())\n  planName     String?\n  exerciseName String\n  sets         Int?\n  reps         Int?\n  weight       Float?\n  date         DateTime\n  user         User     @relation(fields: [userID], references: [userID])\n  userID       Int\n}\n\nmodel StepRecord {\n  recordID   Int      @id @default(autoincrement())\n  stepsCount Int\n  distance   Float?\n  calories   Float?\n  date       DateTime\n  user       User     @relation(fields: [userID], references: [userID])\n  userID     Int\n}\n\nmodel WorkoutRecommendation {\n  recommendationID Int      @id @default(autoincrement())\n  planName         String\n  workoutType      String[]\n  description      String\n}\n\nmodel FitHealthTipAPI {\n  id          Int       @id @default(autoincrement())\n  APIName     String\n  connected   Boolean   @default(false)\n  lastChecked DateTime?\n}\n",
  "inlineSchemaHash": "9064bc179f9412b91e4a4c6178a8c2c9bd71986d00a3cda1781f161422fac504",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"userID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"height\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"weightLogs\",\"kind\":\"object\",\"type\":\"WeightLog\",\"relationName\":\"UserToWeightLog\"},{\"name\":\"workoutLogs\",\"kind\":\"object\",\"type\":\"WorkoutLog\",\"relationName\":\"UserToWorkoutLog\"},{\"name\":\"stepRecords\",\"kind\":\"object\",\"type\":\"StepRecord\",\"relationName\":\"StepRecordToUser\"}],\"dbName\":null},\"WeightLog\":{\"fields\":[{\"name\":\"logID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWeightLog\"},{\"name\":\"userID\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"WorkoutLog\":{\"fields\":[{\"name\":\"logID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"planName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"exerciseName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sets\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reps\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWorkoutLog\"},{\"name\":\"userID\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"StepRecord\":{\"fields\":[{\"name\":\"recordID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"stepsCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"distance\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"calories\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StepRecordToUser\"},{\"name\":\"userID\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"WorkoutRecommendation\":{\"fields\":[{\"name\":\"recommendationID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"planName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workoutType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"FitHealthTipAPI\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"APIName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"connected\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastChecked\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

